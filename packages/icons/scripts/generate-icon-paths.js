/*
 * Copyright 2021 Palantir Technologies, Inc. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview Generates SVG paths used in <Icon> React components
 * N.B. we expect ../src/generated/ to contain SVG definitions of all the icons already
 */

const camelcase = require("camelcase");
const fs = require("fs");
const path = require("path");
const { parse } = require("svg-parser");

const GENERATED_SRC_DIR = path.resolve(__dirname, "../src/generated");
const COPYRIGHT_HEADER = "/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n */\n";

for (const iconSize of [16, 20]) {
    const iconFontSvgDocument = fs.readFileSync(
        path.join(GENERATED_SRC_DIR, `${iconSize}px/blueprint-icons-${iconSize}.svg`),
        "utf8",
    );

    const icons = [];
    console.info(`Parsing SVG glyphs from generated ${iconSize}px SVG icon font...`);
    parseIconGlyphs(iconFontSvgDocument, (iconName, iconPath) => {
        icons.push(iconName);
        writeLinesToFile(`${iconSize}px/paths/${iconName}.ts`, `const path = "${iconPath}"`, "export default path;");
    });
    console.info(`Parsed ${icons.length} icons.`);

    console.info(`Writing index file for ${iconSize}px icon kit paths...`);
    writeLinesToFile(
        `${iconSize}px/paths/index.ts`,
        ...icons.map(iconName => `export { default as ${camelcase(iconName)} } from "./${iconName}";`),
    );
    console.info("Done.");
}

/**
 * Parse all icons of a given size from the SVG font generated by fantasticon.
 * At this point we've already optimized the icon SVGs through svgo (via fantasticon), so
 * we avoid duplicating that work by reading the generated glyphs here.
 *
 * @param {string} iconFontSvgDocument
 * @param {(iconName: string, iconPath: string) => void} cb iterator for each icon path
 */
function parseIconGlyphs(iconFontSvgDocument, cb) {
    const rootNode = parse(iconFontSvgDocument);
    const defs = rootNode.children[0].children[0];
    const glyphs = defs.children[0].children.filter(node => node.tagName === "glyph");

    for (const glyph of glyphs) {
        const name = glyph.properties["glyph-name"];

        // HACKHACK: for some reason, there are duplicates with the suffix "-1", so we ignore those
        if (name.endsWith("-1")) {
            continue;
        }

        const path = glyph.properties["d"];
        cb(name, path);
    }
}

/**
 * Writes lines to given filename in GENERATED_SRC_DIR.
 *
 * @param {string} filename
 * @param {Array<string>} lines
 */
function writeLinesToFile(filename, ...lines) {
    const outputPath = path.join(GENERATED_SRC_DIR, filename);
    const contents = [COPYRIGHT_HEADER, ...lines, ""].join("\n");
    fs.writeFileSync(outputPath, contents);
}

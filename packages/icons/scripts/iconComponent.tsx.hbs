/*
 * Copyright 2021 Palantir Technologies, Inc. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import classNames from "classnames";
import * as React from "react";
import type { SVGIconProps } from "../../svgIconProps";
import { IconSize } from "../../iconSize";
import * as Classes from "../../classes";
import { uniqueId } from "../../jsUtils";

export const {{pascalCase iconName}}: React.FC<SVGIconProps> = React.forwardRef<any, SVGIconProps>(({
    className,
    color,
    size = IconSize.STANDARD,
    title,
    htmlTitle,
    svgProps,
    tagName = "span",
    ...htmlProps
}, ref) => {
    const isLarge = size >= IconSize.LARGE;
    const pixelGridSize =  isLarge ? IconSize.LARGE : IconSize.STANDARD;
    const viewBox = `0 0 ${pixelGridSize} ${pixelGridSize}`;
    const titleId = uniqueId("iconTitle");
    const path = (
        <path
            d={
                isLarge
                    ? "{{icon20pxPath}}"
                    : "{{icon16pxPath}}"
            }
            fillRule="evenodd"
            transform="scale({{pathScaleFactor}} {{pathScaleFactor}})"
        />
    );

    if (tagName === null) {
        return (
            <svg
                aria-labelledby={title ? titleId : undefined}
                data-icon="{{iconName}}"
                fill={color}
                height={size}
                ref={ref}
                role="img"
                viewBox={viewBox}
                width={size}
                {...svgProps}
                {...htmlProps}
            >
                {title && <title id={titleId}>{title}</title>}
                {path}
            </svg>
        );
    } else {
        return React.createElement(
            tagName,
            {
                ...htmlProps,
                "aria-hidden": title ? undefined : true,
                className: classNames(Classes.ICON, `${Classes.ICON}-{{iconName}}`, className),
                ref,
                title: htmlTitle,
            },
            <svg fill={color} data-icon="{{iconName}}" width={size} height={size} role="img" viewBox={viewBox} {...svgProps}>
                {title && <title>{title}</title>}
                {path}
            </svg>
        );
    }
});
{{pascalCase iconName}}.displayName = `Blueprint5.Icon.{{pascalCase iconName}}`;
export default {{pascalCase iconName}};

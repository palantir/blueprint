/*
 * Copyright 2017 Palantir Technologies, Inc. All rights reserved.
 * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy
 * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE
 * and https://github.com/palantir/blueprint/blob/master/PATENTS
 */

@import "~@blueprintjs/core/src/common/variables";
@import "~@blueprintjs/core/src/components/forms/common";
@import "~@blueprintjs/core/src/components/tag/common";

$input-padding: ($pt-input-height - $tag-height) / 2;

.pt-tag-input {
  display: flex;
  flex-wrap: wrap;
  cursor: text;
  height: auto;
  padding: $input-padding 0 0 $input-padding;

  .pt-tag {
    margin: 0 $input-padding $input-padding 0;
    // NOTE: in order to wrap long words, you must set explicit width on TagInput,
    // or use .pt-fill CSS class modifier.
    overflow-wrap: break-word;
  }

  .pt-input-ghost {
    // input fills remaining line
    flex: 1 1 auto;
    margin-bottom: $input-padding;
    // essentially a min-width, cuz flex allows it to grow or shrink:
    width: $pt-grid-size * 10;
    line-height: $tag-height;
  }

  &.pt-large {
    height: auto;

    .pt-input-ghost {
      line-height: $tag-height-large;
    }
  }

  &.pt-active {
    box-shadow: input-transition-shadow($input-shadow-color-focus, true), $input-box-shadow-focus;
    background-color: $input-background-color;
  }
}

// TODO: this is probably a useful modifier that we should pull into core, and use in EditableText
.pt-input-ghost {
  // reset browser input styles (we're using an input solely because you can type in it)
  border: none;
  box-shadow: none;
  background: none;
  padding: 0;

  &:focus {
    // remove focus state too
    // stylelint-disable-next-line declaration-no-important
    outline: none !important;
  }
}

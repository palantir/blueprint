@import "variables";

$light-scopes: (
  "attribute-name": $orange3,
  "background": $white,
  "comment": $gray2,
  "constant": $turquoise2,
  "function": $blue2,
  "id": $gold2,
  "keyword": $violet3,
  "numeric": $rose2,
  "operator": $violet2,
  "pseudo-class": $rose2,
  "punctuation": $dark-gray3,
  "string": $lime1,
  "tag": $forest2,
  "text": $dark-gray1,
  "type": $gold2,
  "variable": $turquoise2,
);

$dark-scopes: (
  "attribute-name": $orange4,
  "background": $dark-gray2,
  "comment": $gray2,
  "constant": $turquoise5,
  "function": $blue4,
  "id": $gold5,
  "keyword": $violet4,
  "numeric": $rose4,
  "operator": $violet5,
  "pseudo-class": $rose3,
  "punctuation": $light-gray5,
  "string": $lime4,
  "tag": $forest3,
  "text": $gray5,
  "type": $gold4,
  "variable": $turquoise3,
);


@mixin syntax($scopes) {
  background: map-get($scopes, "background");
  color: map-get($scopes, "text");

  @each $scope in ("punctuation" "comment" "string" "constant" "numeric" "variable" "keyword" "operator") {
    .#{$scope} { color: map-get($scopes, $scope); }
  }

  .storage {
    @extend .keyword;
  }

  .entity.name,
  .meta.name,
  .support.type {
    color: map-get($scopes, "type");
  }

  .entity {
    @each $scope in ("attribute-name" "tag" "function" "pseudo-class") {
      &.#{$scope} { color: map-get($scopes, $scope); }
    }

    &.pseudo-element {
      @extend .tag;
    }
  }

  .support.type.scss,
  .punctuation.definition.css {
    color: inherit;
  }
}

// actually generate the two themes:

.editor-colors {
  @include syntax($light-scopes);

  .pt-dark & {
    @include syntax($dark-scopes);
  }
}


// Copyright 2015 Palantir Technologies, Inc. All rights reserved.
// Licensed under the terms of the LICENSE file distributed with this project.

@import "~@blueprintjs/core/src/common/variables";

// Generate a selector for a page ID by reference
@function page($ref, $comparator: "=") {
  @return "[data-page-id#{$comparator}\"#{$ref}\"]";
}

// Generate a selector for a KSS example by reference
@function reference($ref, $comparator: "=") {
  @return "[data-reference#{$comparator}\"#{$ref}\"]";
}

// Generate a selector for KSS examples that match or are nested inside this reference.
@function reference-all($ref) {
  // exact reference + children, not a simple prefix.
  // so "button" captures "button-minimal", not "button-group"
  @return reference($ref, "^=");
}

// Generate a selector for a React example by name
@function example($NameExample) {
  @return "[data-example-id=\"#{$NameExample}\"]";
}

// Adjust the flex-basis of examples to fit X per row.
// `.#{$ns}-fill` modifiers will always occupy an entire row.
// (Default styles give flex-basis of 100% to each example.)
@mixin examples-per-row($amount) {
  .docs-example {
    $width: floor(100% / $amount);
    flex-basis: $width;
    width: $width;
    padding-right: $pt-grid-size * 2;

    &[data-modifier=".#{$ns}-fill"] {
      flex-basis: 100%;
      padding-right: 0;
    }
  }
}

// CSS examples

#{reference("ui-text")},
#{reference("running-text")},
#{reference("file-input")},
#{reference("label")},
#{reference("menu")},
#{reference("select-inline")},
#{reference("skeleton")},
#{reference("tag")},
#{reference("tag-minimal")} {
  @include examples-per-row(2);
}

#{reference("lists")},
#{reference-all("input")},
#{reference("button")},
#{reference("button-minimal")},
#{reference("card")},
#{reference("input-group")},
#{reference("progress-bar")},
#{reference("spinner")},
#{reference("textarea")} {
  @include examples-per-row(3);
}

#{reference("checkbox")},
#{reference("radio")},
#{reference("switch")} {
  .docs-example {
    flex-basis: 10%;
  }
}

#{page("button")},
#{example("AlertExample")},
#{example("ToastExample")} {
  // put more space between buttons in all button sections
  .#{$ns}-button + .#{$ns}-button:not(.#{$ns}-fill) {
    margin-left: $pt-grid-size;
  }

  .#{$ns}-button.#{$ns}-fill + .#{$ns}-button.#{$ns}-fill {
    margin-top: $pt-grid-size;
  }
}

#{reference("button-group-vertical")} {
  .#{$ns}-button-group {
    margin-right: $pt-grid-size * 2;
  }
}

#{reference-all("control-group")} {
  display: flex;
  flex-direction: column;
  justify-content: space-between;

  .#{$ns}-control-group:not(:last-child) {
    margin-bottom: $pt-grid-size * 2;
  }
}

#{reference("input-group")} {
  .#{$ns}-input-group {
    margin-bottom: $pt-grid-size;
  }
}

#{reference("select")} {
  @include examples-per-row(4);

  .docs-example {
    padding-right: 0;
  }
}

#{reference("select-inline")} {
  justify-content: initial;

  .docs-example {
    flex-basis: $pt-grid-size * 25;
    margin-right: $options-margin;
  }
}

#{reference("menu")},
#{reference("menu-header")} {
  justify-content: initial;

  .docs-example {
    flex-basis: $pt-grid-size * 15;
    margin-right: $pt-grid-size * 8;
    padding-right: 0;

    &:last-child {
      margin-right: 0;
    }
  }
}

#{reference("spinner")} {
  .docs-react-example > svg {
    width: $pt-grid-size * 10;
    height: $pt-grid-size * 10;
  }
}

#{reference("tree")} {
  .#{$ns}-tree {
    background-color: $white;
    width: $pt-grid-size * 35;

    .#{$ns}-dark & {
      background-color: $dark-gray4;
    }
  }
}

// React examples

#{example("CollapseExample")} {
  .docs-react-example {
    height: $pt-grid-size * 18;
  }
}

#{example("HotkeyPiano")} {
  height: auto;

  .piano-example {
    opacity: 0.5;
  }

  .piano-example:focus {
    opacity: 1;
  }

  .piano-example > :first-child {
    margin-bottom: $pt-grid-size * 2;
  }

  .piano-key {
    display: inline-block;
    position: relative;
    z-index: 1;
  }

  .piano-key > div {
    margin-right: $pt-grid-size/2;
    border-bottom-left-radius: 5px;
    border-bottom-right-radius: 5px;
    background-color: $white;
    width: $pt-grid-size * 8;
    height: $pt-grid-size * 24;
    color: $black;
  }

  .piano-key-sharp {
    z-index: 2;
    width: 0;
    overflow: visible;
    vertical-align: top;
  }

  .piano-key-sharp > div {
    position: absolute;
    top: 0;
    left: $pt-grid-size * -4;
    background-color: $black;
    height: $pt-grid-size * 16;
    color: $white;
  }

  .piano-key-pressed > div {
    background-color: $pt-intent-primary;
    color: $white;
  }

  .piano-key-text {
    position: absolute;
    right: 0;
    bottom: 5px;
    left: 0;
    text-align: center;
  }

  .piano-key-note {
    opacity: 0.5;
  }
}

#{example("HotkeyTester")} .#{$ns}-key-combo {
  display: inline-block;
}

#{example("NumericInputBasicExample")} {
  .docs-react-example {
    // abandon display:flex to ensure pt-fill displays properly
    display: block;
  }
}

#{example("NumericInputExtendedExample")} {
  .docs-react-example input {
    width: $pt-grid-size * 23;
  }
}

#{example("TreeExample")} {
  .#{$ns}-tree {
    background-color: $white;
    width: $pt-grid-size * 35;

    .#{$ns}-dark & {
      background-color: $dark-gray4;
    }
  }
}

// give all Table examples a fixed height
#{page("table")},
#{page("features")} {
  .docs-react-example {
    width: 100%;
    height: $pt-grid-size * 30;
  }

  // make all tables the same width
  .#{$ns}-table-container {
    width: 100%;
  }
}

#{page("popover")} {
  .docs-popover-position-value-code-block {
    text-align: center;
    font-size: $pt-font-size-large;
    font-weight: 600;
  }

  .docs-popover-position-label-side {
    color: $cobalt3;

    .#{$ns}-dark & {
      color: $cobalt5;
    }
  }

  .docs-popover-position-label-alignment {
    color: $forest3;

    .#{$ns}-dark & {
      color: $forest5;
    }
  }
}

// Copyright 2015 Palantir Technologies, Inc. All rights reserved.
// Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy
// of the license at https://github.com/palantir/blueprint/blob/master/LICENSE
// and https://github.com/palantir/blueprint/blob/master/PATENTS

@import "../../common/variables";
@import "../../common/icons";
@import "../../common/mixins";

@import "./common";
@import "./submenu";

/*
Menus

Menus display lists of interactive items.

Styleguide components.menu
*/

/*
JavaScript API

The `Menu`, `MenuItem`, and `MenuDivider` components are available in the __@blueprintjs/core__ package.
Make sure to review the [general usage docs for JS components](#components.usage).

The Menu API includes three stateless React components:

- [`Menu`](#components.menu.js.menu)
- [`MenuItem`](#components.menu.js.menu-item)
- [`MenuDivider`](#components.menu.js.menu-divider)

### Sample Usage

```
const { Menu, MenuItem, MenuDivider } = BlueprintComponents;

class MenuExample extends React.Component<{}, {}> {
    public render() {
        return (
            <Menu>
                <MenuItem
                    iconName="new-text-box"
                    onClick={this.handleClick}
                    text="New text box" />
                <MenuItem
                    iconName="new-object"
                    onClick={this.handleClick}
                    text="New object" />
                <MenuItem
                    iconName="new-link"
                    onClick={this.handleClick}
                    text="New link" />
                <MenuDivider />
                <MenuItem text="Settings..." iconName="cog" />
            </Menu>
        );
    }

    private handleClick(e: React.MouseEvent) {
        console.log("clicked", (e.target as HTMLElement).textContent);
    }
}
```

@react-example MenuExample

Styleguide components.menu.js
*/

/*
Menu

A `Menu`'s children (menu items and dividers) are rendered as the contents of a `.pt-menu` element.

You can add the `pt-large` class to the `Menu` to make a larger version of the menu.

@interface IMenuProps

Styleguide components.menu.js.menu
*/

/*
Menu item

A `MenuItem` is a single interactive item in a `Menu`.

This component renders an `a.pt-menu-item`. Make the `MenuItem` a link by providing the `href`,
`target`, and `onClick` props as necessary.

Create submenus by nesting `MenuItem`s inside each other as `children`, or by providing a `submenu`
prop with an array of `MenuItem`s.

@interface IMenuItemProps

Styleguide components.menu.js.menu-item
*/

/*
Menu divider

Use `MenuDivider` to separate menu sections. Optionally, add a title to the divider.

@interface IMenuDividerProps

Weight: 1

Styleguide components.menu.js.menu-divider
*/

/*
Dropdown menus

The `Menu` component by itself simply renders a menu list. To make a dropdown menu, use a `Menu` element
as the `content` property of a `Popover`:

```
<Popover content={<Menu>...</Menu>} position={Position.RIGHT_TOP}>
    <Button iconName="share" text="Open in..." />
</Popover>
```

When the user clicks a menu item that is not disabled and is not part of a submenu, the popover is
automatically dismissed (in other words, the menu closes).
This is because the `MenuItem` component adds the `pt-popover-dismiss` class to these items by default
(see [Popover JavaScript API](#components.popover.js) for more information).
If you want to opt out of this behavior, you can add the `shouldDismissPopover` prop to a `MenuItem`.

Notice that selecting the menu item labeled **Table** in the example below does not automatically dismiss the `Popover`.
Selecting other menu items does dismiss the popover.

@react-example DropdownMenuExample

Weight: 3

Styleguide components.menu.js.dropdown
*/

/*
CSS API

Menus can be constructed manually using the HTML markup and `pt-menu-*` classes below. However, you
should use the menu [React components](#components.menu.js) instead wherever possible, as they abstract
away the tedious parts of implementing a menu.

- Begin with a `ul.pt-menu`. Each `li` child denotes a single entry in the menu.

- Put a `.pt-menu-item` element inside an `li` to create a clickable entry. Use either `<button>`
or `<a>` tags for menu items to denote interactivity.

- Add icons to menu items the same way you would to buttons: simply add the appropriate `pt-icon-<name>` class*.

- Make menu items non-interactive with the class `pt-disabled`.

- Wrap menu item text in a `<span>` element for proper alignment. (Note that React automatically
does this.)

- Add a right-aligned label to a menu item by adding a `span.pt-menu-item-label` inside the
`.pt-menu-item`, after the content. Add an icon to the label by adding icon classes to the label
element (`pt-icon-standard` size is recommended).

- Add a divider between items with `li.pt-menu-divider`.

- If you want the popover to close when the user clicks a menu item, add the class `pt-popover-dismiss`
to any relevant menu items.

<small>\* You do not need to add a `pt-icon-<sizing>` class to menu items&mdash;icon sizing is
defined as part of `.pt-menu-item`.</small>

<div class="pt-callout pt-intent-primary pt-icon-info-sign">
  Note that the following examples are `display: inline-block`; you may need to adjust
menu width in your own usage.
</div>

Markup:
<ul class="pt-menu {{.modifier}} pt-elevation-1">
  <li>
    <a class="pt-menu-item pt-icon-people" tabindex="0">Share...</a>
  </li>
  <li>
    <a class="pt-menu-item pt-icon-circle-arrow-right" tabindex="0">Move...</a>
  </li>
  <li>
    <a class="pt-menu-item pt-icon-edit" tabindex="0">Rename</a>
  </li>
  <li class="pt-menu-divider"></li>
  <li>
    <a class="pt-menu-item pt-icon-trash pt-intent-danger" tabindex="0">Delete</a>
  </li>
</ul>

.pt-large - Large size (only supported on <code>.pt-menu</code>)

Styleguide components.menu.css
*/

.pt-menu {
  margin: 0;
  border-radius: $pt-border-radius;
  background: $menu-background-color;
  min-width: $menu-min-width;
  padding: $half-grid-size;
  list-style: none;
  text-align: left;
  color: $pt-text-color;
}

.pt-menu-divider {
  @include menu-divider();
}

.pt-menu-item {
  @include menu-item();

  &::before {
    // support pt-icon-* classes directly on this element
    @include pt-icon();
    float: left;
    margin-right: $menu-item-padding;
  }

  &::before,
  &::after {
    color: $pt-icon-color;
  }

  .pt-menu-item-label {
    color: $pt-text-color-muted;
  }

  &:not(.pt-disabled):hover {
    &::before,
    &::after,
    .pt-menu-item-label {
      color: $white;
    }

    // intent color only appears on hover
    @each $intent, $color in $pt-intent-colors {
      &.pt-intent-#{$intent} {
        background-color: $color;
      }
    }
  }

  &.pt-disabled {
    // override global a:focus styles
    outline: none;
    cursor: not-allowed;
    color: $pt-text-color-disabled;

    &::before,
    &::after {
      color: $pt-icon-color-disabled;
    }

    .pt-menu-item-label {
      color: $pt-text-color-disabled;
    }
  }

  .pt-large & {
    @include menu-item-large();

    &::before {
      @include pt-icon($pt-icon-size-large);

      margin-right: $menu-item-padding-large;
    }
  }
}

a.pt-menu-item {
  &,
  &:hover {
    text-decoration: none;
  }
}

button.pt-menu-item {
  border: none;
  background: none;
  width: 100%;
  text-align: left;
}

.pt-menu-item-label {
  float: right;
  margin-left: $menu-item-padding;
}

/*
Section headers

Add an `li.pt-menu-header`. Wrap the text in an `<h6>` tag for proper typography and borders.

Markup:
<ul class="pt-menu pt-elevation-1">
  <li class="pt-menu-header"><h6>Layouts</h6></li>
  <li><button type="button" class="pt-menu-item pt-icon-layout-auto">Auto</button></li>
  <li><button type="button" class="pt-menu-item pt-icon-layout-circle">Circle</button></li>
  <li><button type="button" class="pt-menu-item pt-icon-layout-grid">Grid</button></li>
  <li class="pt-menu-header"><h6>Views</h6></li>
  <li><button type="button" class="pt-menu-item pt-icon-history">History</button></li>
  <li><button type="button" class="pt-menu-item pt-icon-star">Favorites</button></li>
  <li><button type="button" class="pt-menu-item pt-icon-envelope">Messages</button></li>
</ul>

Styleguide components.menu.css.header
*/

.pt-menu-header {
  @include menu-header($heading-selector: "> h6");

  .pt-large & {
    @include menu-header-large($heading-selector: "> h6");
  }
}

// dark theme
.pt-dark {
  .pt-menu {
    background: $dark-menu-background-color;
    color: $pt-dark-text-color;
  }

  .pt-menu-item {
    &::before,
    &::after {
      color: $pt-dark-icon-color;
    }

    .pt-menu-item-label {
      color: $pt-dark-text-color-muted;
    }

    &:hover {
      &::before,
      &::after {
        color: $white;
      }
    }

    &.pt-disabled,
    &.pt-disabled:hover {
      color: $pt-dark-text-color-disabled;

      &::before,
      &::after {
        color: $pt-dark-icon-color-disabled;
      }

      .pt-menu-item-label {
        color: $pt-dark-icon-color-disabled;
      }
    }
  }

  .pt-menu-divider,
  .pt-menu-header {
    border-color: $pt-dark-divider-white;
  }

  .pt-menu-header > h6 {
    color: $pt-dark-heading-color;
  }
}

// #402 support menu inside label
.pt-label .pt-menu {
  margin-top: $pt-grid-size / 2;
}

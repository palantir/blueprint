// Copyright 2016 Palantir Technologies, Inc. All rights reserved.
// Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy
// of the license at https://github.com/palantir/blueprint/blob/master/LICENSE
// and https://github.com/palantir/blueprint/blob/master/PATENTS

@import "~bourbon/app/assets/stylesheets/bourbon";
@import "../../common/variables";
@import "../forms/common";

/*
Editable text

`EditableText` looks like normal UI text, but transforms into a text input field when the user
focuses it.

The text input inherits all font styling from its ancestors, making the transition between reading
and editing text seamless.

You might use this component for inline renaming, or for an [editable multiline
description](#components.editable.multiline). You should not use `EditableText` when a static
always-editable `<input>` or `<textarea>` tag would suffice.

<div class="pt-callout pt-intent-danger pt-icon-error">
  <h5>Centering the component</h5>
  **Do not center this component** using `text-align: center`, as it will cause an infinite loop
  in the browser ([more details](https://github.com/JedWatson/react-select/issues/540)). Instead,
  you should center the component via flexbox or with `position` and `transform: translateX(-50%)`.
</div>

@react-example EditableTextExample

Styleguide components.editable
*/

/*
JavaScript API

The `EditableText` component is available in the __@blueprintjs/core__ package. Make sure to review
the [general usage docs for JS components](#components.usage).

`EditableText` can be used like an [`input`
element](https://facebook.github.io/react/docs/forms.html) and supports controlled or uncontrolled
usage through the `value` or `defaultValue` props, respectively.

The `onConfirm` and `onCancel` callbacks are invoked based on user interaction. The user presses
<kbd class="pt-key">enter</kbd> or blurs the input to confirm the current value, or presses <kbd
class="pt-key">esc</kbd> to cancel. Canceling resets the field to the last confirmed value.

`EditableText` by default supports _exactly one line of text_ and will grow or shrink horizontally
based on the length of text. See below for information on [multiline
support](#components.editable.multiline).

@interface IEditableTextProps

Styleguide components.editable.js
*/

/*
Multiline mode

```
<EditableText multiline minLines={3} maxLines={12} {...props} />
```

Provide the `multiline` prop to create an `EditableText` field that spans multiple lines. Multiline
mode uses a `<textarea>` instead of an `<input type="text">` to support multiple lines of text.

Users confirm text in multiline mode by pressing <kbd class="pt-key">ctrl</kbd> <kbd
class="pt-key">enter</kbd> or
<kbd class="pt-key">cmd</kbd> <kbd class="pt-key">enter</kbd> rather than simply <kbd
class="pt-key">enter</kbd>. (Pressing the <kbd class="pt-key">enter</kbd> key by itself moves the
cursor to the next line.)

Additionally, in multiline mode the component's width is fixed at 100%. It grows or shrinks
_vertically_ instead, based on the number of lines of text. You can use the `minLines` and
`maxLines` props to constrain the vertical size of the component.

<div class="pt-callout pt-intent-warning pt-icon-warning-sign">
  <h5>Multiline prop format</h5>
  You should declare `multiline` as a valueless boolean prop, as in the example above
  (`<EditableText multiline ...>`). This prevents you from changing the value after declaring it,
  which would provide a sub-optimal experience for users (multiline text does not always render
  cleanly into a single line).
</div>

Styleguide components.editable.multiline
*/

.pt-editable-text {
  display: inline-block;
  position: relative;
  cursor: text;
  max-width: 100%;
  vertical-align: top;
  white-space: nowrap;

  // input styles on the ::before
  &::before {
    @include position(absolute, (-$pt-border-radius) (-$pt-border-radius));
    border-radius: $pt-border-radius;
    content: "";
    transition: background-color $pt-transition-duration $pt-transition-ease,
                box-shadow $pt-transition-duration $pt-transition-ease;
  }

  &:hover::before {
    box-shadow: input-transition-shadow($input-focus-shadow-color),
                inset 0 0 0 1px $pt-divider-black;
  }

  &.pt-editable-editing::before {
    box-shadow: input-transition-shadow($input-focus-shadow-color, true), $input-focus-box-shadow;
    background-color: $input-background-color;
  }

  &.pt-disabled::before {
    box-shadow: none;
  }

  @each $intent, $color in $pt-intent-colors {
    &.pt-intent-#{$intent} {
      .pt-editable-input,
      .pt-editable-content {
        color: $color;
      }

      &:hover::before {
        box-shadow: input-transition-shadow($color), inset border-shadow(0.4, $color, 1px);
      }

      &.pt-editable-editing::before {
        box-shadow: input-transition-shadow($color, true), $input-focus-box-shadow;
      }
    }
  }

  .pt-dark & {
    &:hover::before {
      box-shadow: input-transition-shadow($dark-input-focus-shadow-color),
                  inset 0 0 0 1px $pt-dark-divider-white;
    }

    &.pt-editable-editing::before {
      box-shadow: input-transition-shadow($dark-input-focus-shadow-color, true),
                  $pt-dark-input-box-shadow;
      background-color: $dark-input-background-color;
    }

    &.pt-disabled::before {
      box-shadow: none;
    }

    @each $intent, $color in $pt-dark-intent-text-colors {
      &.pt-intent-#{$intent} {
        .pt-editable-content {
          color: $color;
        }

        &:hover::before {
          box-shadow: input-transition-shadow($color), inset border-shadow(0.4, $color, 1px);
        }

        &.pt-editable-editing::before {
          box-shadow: input-transition-shadow($color, true), $pt-dark-input-box-shadow;
        }
      }
    }
  }
}

.pt-editable-input,
.pt-editable-content {
  display: inherit;
  position: relative;
  // inherit and respect parent bounds and text styles
  min-width: inherit;
  max-width: inherit;
  vertical-align: top;
  text-transform: inherit;
  letter-spacing: inherit;
  color: inherit;
  font: inherit;
  // prevent user resizing of textarea
  resize: none;
}

.pt-editable-input {
  // reset browser input styles (we're using an input solely because you can type in it)
  border: none;
  box-shadow: none;
  background: none;
  width: 100%;
  padding: 0;
  // IE11's textarea will otherwise inherit the white-space property from its direct parent
  white-space: pre-wrap;

  &:focus {
    outline: none;
  }

  &::-ms-clear {
    display: none;
  }
}

.pt-editable-content {
  overflow: hidden;
  // magical number to account for slight increase in input width for cursor bar
  padding-right: 2px;
  text-overflow: ellipsis;
  // preserve so trailing whitespace is included in scrollWidth
  white-space: pre;

  .pt-editable-editing > & {
    position: absolute;
    left: 0;
    visibility: hidden;
  }

  .pt-editable-placeholder > & {
    color: $input-placeholder-color;

    .pt-dark & {
      color: $dark-input-placeholder-color;
    }
  }
}

.pt-editable-text.pt-multiline {
  display: block;

  .pt-editable-content {
    overflow: auto;
    white-space: pre-wrap;
  }
}

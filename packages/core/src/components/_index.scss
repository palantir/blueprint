// Copyright 2015 Palantir Technologies, Inc. All rights reserved.
// Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy
// of the license at https://github.com/palantir/blueprint/blob/master/LICENSE
// and https://github.com/palantir/blueprint/blob/master/PATENTS

/*
Components

Blueprint's JavaScript components are stable and their APIs adhere to
[semantic versioning](http://semver.org/).
They are distributed in the __@blueprintjs/core__ package and can be consumed as CommonJS modules
[via NPM](https://www.npmjs.com/package/@blueprintjs/core).

Weight: 6

Styleguide components
*/

/*
Usage

Weight: -1

Styleguide components.usage
*/

/*
NPM installation

1. Install the core package with an NPM client like `npm` or `yarn`, pulling in all relevant
dependencies:

  ```sh
  npm install --save @blueprintjs/core
  ```

1. If you see `UNMET PEER DEPENDENCY` errors, you should manually install React:

  ```sh
  npm install --save react react-dom react-addons-css-transition-group
  ```

1. After installation, you'll be able to import the React components in your application:

  ```
  // extract specific components
  import { Intent, Spinner, DatePickerFactory } from "@blueprintjs/core";
  // or just take everything!
  import * as Blueprint from "@blueprintjs/core";

  // using JSX:
  const mySpinner = <Spinner intent={Intent.PRIMARY} />;

  // using the namespace import:
  const anotherSpinner = <Blueprint.Spinner intent={Blueprint.Intent.PRIMARY}/>;

  // use factories for React.createElement shorthand if you're not using JSX.
  // every component provides a corresponding <Name>Factory.
  const myDatePicker = DatePickerFactory();
  ```

1. Don't forget to include the main CSS file from each Blueprint package! Additionally, the
`resources/` directory contains supporting media such as fonts and images.

  ```html
  <!-- in plain old reliable HTML -->
  <!DOCTYPE HTML>
  <html>
    <head>
      ...
      <!-- include dependencies manually -->
      <link href="path/to/node_modules/normalize.css/normalize.css" rel="stylesheet" />
      <link href="path/to/node_modules/@blueprintjs/core/dist/blueprint.css" rel="stylesheet" />
      ...
    </head>
    ...
  </html>
  ```

  ```scss
  // or, using node-style package resolution in a CSS file:
  // (dependencies' stylesheets should be resolved automatically)
  @import "~@blueprintjs/core";
  ```

Weight: -1

Styleguide components.usage.npm
*/

/*
DOM4

Blueprint relies on a handful of DOM Level 4 API methods: `el.query`, `el.queryAll`, and
`el.closest()`. `@blueprintjs/core` depends on a [polyfill library called `dom4`][dom4] to ensure
these methods are available. This module is conditionally loaded if Blueprint is used in a browser
environment.

[dom4]: https://webreflection.github.io/dom4/

Styleguide components.usage.dom4
*/

/*
TypeScript

Blueprint is written in TypeScript and therefore its own `.d.ts` type definitions are distributed in
the NPM package and should be resolved automatically by the compiler. However, you'll need to
install typings for Blueprint's dependencies before you can consume it:

```sh
# required for all @blueprintjs packages:
npm install --save @types/pure-render-decorator @types/react @types/react-dom @types/react-addons-css-transition-group

# @blueprintjs/datetime requires:
npm install --save @types/moment

# @blueprintjs/table requires:
npm install --save @types/es6-shim
```

<div class="pt-callout pt-intent-primary pt-icon-info-sign">
  For more information, see the TypeScript Handbook for
  [guidance on consuming declaration files][handbook].
</div>

[handbook]: https://www.typescriptlang.org/docs/handbook/declaration-files/consumption.html

Styleguide components.usage.typescript
*/

/*
Vanilla JS APIs

JS components are built using React, but that does not limit their usage to just React applications.
You can render any component in any JavaScript application with `ReactDOM.render`. Think of it like
using a jQuery plugin.

```
const myContainerElement = document.querySelector(".my-container");

// with JSX
ReactDOM.render(
    <Spinner className="pt-intent-primary pt-small" />,
    myContainerElement
);

// with vanilla JS, use the factory
ReactDOM.render(
    SpinnerFactory({
        className: "pt-intent-primary pt-small"
    }),
    myContainerElement
);
```

To remove the component from the DOM and clean up, unmount it:

```
ReactDOM.unmountComponentAtNode(myContainerElement);
```

Check out the [React API docs](https://facebook.github.io/react/docs/react-api.html) for more details.

Styleguide components.usage.vanilla
*/

@import "alert/alert";
@import "breadcrumbs/breadcrumbs";
@import "button/button";
@import "button/button-group";
@import "callout/callout";
@import "card/card";
@import "collapse/collapse";
@import "collapsible-list/collapsible-list";
@import "context-menu/context-menu";
@import "dialog/dialog";
@import "editable-text/editable-text";
@import "forms/index";
@import "hotkeys/hotkeys";
@import "menu/menu";
@import "navbar/navbar";
@import "non-ideal-state/non-ideal-state";
@import "overlay/overlay";
@import "popover/popover";
@import "portal/portal";
@import "progress/progress-bar";
@import "skeleton/skeleton";
@import "slider/slider";
@import "spinner/spinner";
@import "table/table";
@import "tabs/tabs";
@import "tag/tag";
@import "toast/toast";
@import "tooltip/tooltip";
@import "tree/tree";

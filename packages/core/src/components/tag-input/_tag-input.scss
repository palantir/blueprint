/*
 * Copyright 2017 Palantir Technologies, Inc. All rights reserved.
// Licensed under the terms of the LICENSE file distributed with this project.
 */

@import "../../common/variables";
@import "../forms/common";
@import "../tag/common";

$ti-padding: ($pt-input-height - $tag-height) / 2;
$ti-padding-right: ($pt-input-height - $pt-button-height-small) / 2;
$ti-large-padding-right: ($pt-input-height-large - $pt-button-height-small) / 2;

$ti-icon-padding: ($pt-input-height - $pt-icon-size-standard) / 2;
$ti-icon-padding-large: ($pt-input-height-large - $pt-icon-size-standard) / 2;

.pt-tag-input {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  cursor: text;
  height: auto;
  padding: $ti-padding $ti-padding-right 0 0;

  .pt-tag-input-icon {
    // stylelint-disable-next-line max-line-length
    margin: 0 ($ti-icon-padding - $ti-padding) $ti-padding $ti-icon-padding;
    color: $pt-icon-color;
  }

  .pt-tag {
    margin: 0 0 $ti-padding $ti-padding;
    // NOTE: in order to wrap long words, you must set explicit width on TagInput,
    // or use .pt-fill CSS class modifier.
    overflow-wrap: break-word;
  }

  .pt-input-ghost {
    // input fills remaining line
    flex: 1 1 auto;
    margin-bottom: $ti-padding;
    // essentially a min-width, cuz flex allows it to grow or shrink:
    width: $pt-grid-size * 10;
    line-height: $tag-height;

    // match padding of other input elements iff no tags are selected
    &:not(:first-child) {
      padding: 0 ($input-padding-horizontal - $ti-padding);
    }

    &:disabled,
    &.pt-disabled {
      cursor: not-allowed;
    }

    ~ * {
      // shift right element up (to ignore top padding) so flex box will center it correctly
      margin-top: -$ti-padding;
    }
  }

  &.pt-large {
    height: auto;
    padding-right: $ti-large-padding-right;

    .pt-tag-input-icon {
      // stylelint-disable-next-line max-line-length
      margin: 0 ($ti-icon-padding-large - $ti-padding) $ti-padding $ti-icon-padding-large;
    }

    .pt-input-ghost {
      line-height: $tag-height-large;
    }
  }

  &.pt-active {
    box-shadow: input-transition-shadow($input-shadow-color-focus, true), $input-box-shadow-focus;
    background-color: $input-background-color;
  }

  .pt-dark &,
  &.pt-dark {
    .pt-tag-input-icon {
      color: $pt-dark-icon-color;
    }

    .pt-input-ghost {
      @include pt-dark-input-placeholder();

      color: $dark-input-color;
    }

    &.pt-active {
      box-shadow: dark-input-transition-shadow($dark-input-shadow-color-focus, true),
                  $pt-dark-input-box-shadow;
      background-color: $dark-input-background-color;
    }
  }
}

// TODO: this is probably a useful modifier that we should pull into core, and use in EditableText
.pt-input-ghost {
  @include pt-input-placeholder();

  // reset browser input styles (we're using an input solely because you can type in it)
  border: none;
  box-shadow: none;
  background: none;
  padding: 0 $input-padding-horizontal;

  &:focus {
    // remove focus state too
    // stylelint-disable-next-line declaration-no-important
    outline: none !important;
  }
}

// Copyright 2015 Palantir Technologies, Inc. All rights reserved.
// Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy
// of the license at https://github.com/palantir/blueprint/blob/master/LICENSE
// and https://github.com/palantir/blueprint/blob/master/PATENTS

@import "~bourbon/app/assets/stylesheets/bourbon";
@import "../../common/variables";
@import "../forms/common";
@import "./common";

/*
Button groups

Markup:
<div class="pt-button-group {{.modifier}}">
  <a class="pt-button pt-icon-database" tabindex="0" role="button">Queries</a>
  <a class="pt-button pt-icon-function" tabindex="0" role="button">Functions</a>
  <a class="pt-button" tabindex="0" role="button">
    Options <span class="pt-icon-standard pt-icon-caret-down pt-align-right"></span>
  </a>
</div>
<br /><br />
<div class="pt-button-group {{.modifier}}">
  <a class="pt-button pt-icon-chart" tabindex="0" role="button"></a>
  <a class="pt-button pt-icon-control" tabindex="0" role="button"></a>
  <a class="pt-button pt-icon-graph" tabindex="0" role="button"></a>
  <a class="pt-button pt-icon-camera" tabindex="0" role="button"></a>
  <a class="pt-button pt-icon-map" tabindex="0" role="button"></a>
  <a class="pt-button pt-icon-code" tabindex="0" role="button"></a>
  <a class="pt-button pt-icon-th" tabindex="0" role="button"></a>
  <a class="pt-button pt-icon-time" tabindex="0" role="button"></a>
  <a class="pt-button pt-icon-compressed" tabindex="0" role="button"></a>
</div>
<br /><br />
<div class="pt-button-group {{.modifier}}">
  <button type="button" class="pt-button pt-intent-success">Save</button>
  <button type="button" class="pt-button pt-intent-success pt-icon-caret-down"></button>
</div>

.pt-large - Use large buttons
.pt-minimal - Use minimal buttons. Note that these minimal buttons will not automatically
              truncate text in an ellipsis because of the divider line added in CSS.

Styleguide pt-button-group
*/

.pt-button-group {
  display: inline-flex;

  .pt-button {
    // ensure button can never be smaller than its default size
    flex: 0 0 auto;
    position: relative;
    z-index: index($control-group-stack, "button-default");

    // the ordering of these z-index CSS rules is particular because of CSS
    // selector specificity. specifically, disabled styles should have
    // precedence over hover and active styles to prevent mouse interactions on
    // disabled buttons from reordering elements in the stack.

    &:focus {
      z-index: index($control-group-stack, "button-focus");
    }

    &:hover {
      z-index: index($control-group-stack, "button-hover");
    }

    &:active,
    &.pt-active {
      z-index: index($control-group-stack, "button-active");
    }

    &:disabled,
    &.pt-disabled {
      z-index: index($control-group-stack, "button-disabled");
    }

    &[class*="pt-intent-"] {
      z-index: index($control-group-stack, "intent-button-default");

      &:focus {
        z-index: index($control-group-stack, "intent-button-focus");
      }

      &:hover {
        z-index: index($control-group-stack, "intent-button-hover");
      }

      &:active,
      &.pt-active {
        z-index: index($control-group-stack, "intent-button-active");
      }

      &:disabled,
      &.pt-disabled {
        z-index: index($control-group-stack, "intent-button-disabled");
      }
    }
  }

  // support wrapping buttons in a tooltip, which adds a wrapper element
  &:not(.pt-minimal) {
    > .pt-popover-target:not(:first-child) .pt-button,
    > .pt-button:not(:first-child) {
      border-top-left-radius: 0;
      border-bottom-left-radius: 0;
    }

    > .pt-popover-target:not(:last-child) .pt-button,
    > .pt-button:not(:last-child) {
      margin-right: -$button-border-width;
      border-top-right-radius: 0;
      border-bottom-right-radius: 0;
    }
  }

  &.pt-minimal {
    .pt-button {
      @include pt-button-minimal();

      margin-right: $pt-grid-size + $minimal-button-divider-width;
      // always round the borders on minimal buttons
      // stylelint-disable-next-line declaration-no-important
      border-radius: $pt-border-radius !important;
      // so the ::after divider is visible outside bounds of button
      // however, this prevents ellipsizing of button text :(
      overflow: visible;

      &:focus {
        // ensure outline is always a rectangle, instead of contouring to bounding box
        outline-style: solid;
      }

      &::after {
        @include pt-button-minimal-divider();

        display: inline-block;
        position: absolute;
        top: 0;
        left: 100%;
        content: "";
      }
    }

    > .pt-popover-target:last-child .pt-button,
    > .pt-button:last-child {
      margin-right: 0;

      &::after {
        display: none;
      }
    }
  }

  /*
  Responsive

  Markup:
  <div class="pt-button-group pt-large pt-fill">
    <a class="pt-button pt-intent-primary pt-fixed" tabindex="0" role="button">Start</a>
    <a class="pt-button pt-intent-primary" tabindex="0" role="button">Left</a>
    <a class="pt-button pt-intent-primary pt-active" tabindex="0" role="button">Middle</a>
    <a class="pt-button pt-intent-primary" tabindex="0" role="button">Right</a>
    <a class="pt-button pt-intent-primary pt-fixed" tabindex="0" role="button">End</a>
  </div>
  <br />
  <div class="pt-button-group pt-fill">
    <button class="pt-button pt-icon-arrow-left"></button>
    <button class="pt-button pt-fill">Middle</button>
    <button class="pt-button pt-icon-arrow-right"></button>
  </div>

  Styleguide pt-button-group.pt-fill
  */

  &.pt-fill {
    display: flex;
  }

  .pt-button.pt-fill,
  &.pt-fill .pt-button:not(.pt-fixed) {
    flex: 1 1 auto;
  }

  /*
  Vertical button groups

  Markup:
  <div class="pt-button-group pt-vertical">
    <a class="pt-button pt-icon-search-template" role="button" tabindex="0"></a>
    <a class="pt-button pt-icon-zoom-in" role="button" tabindex="0"></a>
    <a class="pt-button pt-icon-zoom-out" role="button" tabindex="0"></a>
    <a class="pt-button pt-icon-zoom-to-fit" role="button" tabindex="0"></a>
  </div>
  <div class="pt-button-group pt-vertical">
    <button type="button" class="pt-button pt-active">Home</button>
    <button type="button" class="pt-button">Pages</button>
    <button type="button" class="pt-button">Blog</button>
    <button type="button" class="pt-button">Calendar</button>
  </div>
  <div class="pt-button-group pt-vertical pt-align-left pt-large">
    <button type="button" class="pt-button pt-intent-primary pt-icon-document">Text</button>
    <button type="button" class="pt-button pt-intent-primary pt-icon-media pt-active">Media</button>
    <button type="button" class="pt-button pt-intent-primary pt-icon-link">Sources</button>
  </div>

  Styleguide pt-button-group.pt-vertical
  */

  &.pt-vertical {
    flex-direction: column;
    align-items: stretch;
    vertical-align: top;

    .pt-button {
      // we never want that margin-right when vertical
      margin-right: 0 !important; // stylelint-disable-line declaration-no-important
    }

    > .pt-popover-target:first-child .pt-button,
    > .pt-button:first-child {
      border-radius: $pt-border-radius $pt-border-radius 0 0;
    }

    > .pt-popover-target:last-child .pt-button,
    > .pt-button:last-child {
      border-radius: 0 0 $pt-border-radius $pt-border-radius;
    }

    > .pt-popover-target:not(:last-child) .pt-button,
    > .pt-button:not(:last-child) {
      margin-bottom: -$button-border-width;
    }

    &.pt-minimal .pt-button {
      &:not(:last-child) {
        margin-bottom: $pt-grid-size + $minimal-button-divider-width;
      }

      &::after {
        top: 100%;
        right: 0;
        left: 0;
        width: auto;
        height: $minimal-button-divider-width;
      }
    }
  }

  &.pt-align-left .pt-button {
    text-align: left;
  }

  .pt-dark & {
    // support wrapping buttons in a Blueprint.Tooltip, which adds a wrapper element
    // in dark theme, we adjust the spacing between buttons for best visual results
    &:not(.pt-minimal) {
      > .pt-popover-target:not(:last-child) .pt-button,
      > .pt-button:not(:last-child) {
        margin-right: $button-border-width;
      }
    }

    &.pt-vertical {
      > .pt-popover-target:not(:last-child) .pt-button,
      > .pt-button:not(:last-child) {
        margin-bottom: $button-border-width;
      }
    }
  }
}

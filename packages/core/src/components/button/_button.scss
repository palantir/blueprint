// Copyright 2015 Palantir Technologies, Inc. All rights reserved.
// Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy
// of the license at https://github.com/palantir/blueprint/blob/master/LICENSE
// and https://github.com/palantir/blueprint/blob/master/PATENTS

@import "~bourbon/app/assets/stylesheets/bourbon";
@import "../../common/variables";
@import "./common";

/*
Button

Markup:
<a role="button" class="pt-button {{.modifier}}" {{:modifier}} tabindex="0">Anchor</a>
<button type="button" class="pt-button pt-icon-add {{.modifier}}" {{:modifier}}>Button</button>

:disabled - Disabled state
.pt-disabled - Disabled appearance
.pt-intent-primary - Primary intent
.pt-intent-success - Success intent
.pt-intent-warning - Warning intent
.pt-intent-danger - Danger intent
.pt-active - Active appearance
.pt-large - Larger size
.pt-fill - Fill parent container

Styleguide pt-button
*/
.pt-button {
  @include pt-button-base();
  @include pt-button-height($pt-button-height);

  &:disabled,
  &.pt-disabled {
    cursor: not-allowed;
  }

  &.pt-fill {
    width: 100%;
  }

  &:not([class*="pt-intent-"]) {
    @include pt-button();
  }

  @each $intent, $colors in $button-intents {
    &.pt-intent-#{$intent} {
      @include pt-button-intent($colors...);
    }
  }

  &[class*="pt-intent-"] .pt-button-spinner .pt-spinner-head {
    stroke: $white;
  }

  &.pt-loading {
    position: relative;

    &[class*="pt-icon-"]::before {
      visibility: hidden;
    }

    .pt-button-spinner {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }

    > :not(.pt-button-spinner) {
      visibility: hidden;
    }
  }

  /*
  Buttons with icons

  Markup:
  <button type="button" class="pt-button pt-icon-add">Default button</button>
  <button type="button" class="pt-button pt-icon-refresh"></button>
  <button type="button" class="pt-button pt-large pt-icon-add">Large button</button>
  <button type="button" class="pt-button pt-large pt-icon-refresh"></button>

  Styleguide pt-button.pt-icon
  */
  &[class*="pt-icon-"]::before {
    @include pt-icon();

    margin-right: $button-icon-spacing;
    color: $pt-icon-color;
  }

  /*
  Advanced icon usage

  Markup:
  <button type="button" class="pt-button pt-intent-success">
    Next step
    <span class="pt-icon-standard pt-icon-arrow-right pt-align-right"></span>
  </button>
  <button type="button" class="pt-button">
    <span class="pt-icon-standard pt-icon-user"></span>
    Profile settings
    <span class="pt-icon-standard pt-icon-caret-down pt-align-right"></span>
  </button>
  <button type="button" class="pt-button pt-intent-danger">
    Reset
    <span class="pt-icon-standard pt-icon-refresh pt-align-right"></span>
  </button>
  <button type="button" class="pt-button pt-large">
    <span class="pt-icon-standard pt-icon-document"></span>
    upload.txt
    <span class="pt-icon-standard pt-icon-cross pt-align-right"></span>
  </button>

  Styleguide pt-button.pt-icon-advanced
  */

  #{$icon-classes} {
    margin-right: $button-icon-spacing;
    color: $pt-icon-color;

    &.pt-align-right {
      margin-right: 0;
      margin-left: $button-icon-spacing;
    }
  }

  .pt-dark & {
    &:not([class*="pt-intent-"]) {
      @include pt-dark-button();

      &[class*="pt-icon-"]::before {
        color: $pt-dark-icon-color;
      }

      #{$icon-classes} {
        color: $pt-dark-icon-color;
      }
    }

    &[class*="pt-intent-"] {
      @include pt-dark-button-intent();

      .pt-button-spinner .pt-spinner-head {
        stroke: $dark-progress-head-color;
      }
    }
  }

  &:disabled,
  &.pt-disabled,
  &[class*="pt-intent-"] {
    // disabled and intent button icon should use same color as text
    // stylelint-disable declaration-no-important
    &::before {
      color: inherit !important;
    }

    #{$icon-classes} {
      color: inherit !important;
    }
    // stylelint-enable declaration-no-important
  }

  /*
  Minimal buttons

  Markup:
  <a role="button" class="pt-button pt-minimal {{.modifier}}" {{:modifier}} tabindex="0">Anchor</a>
  <button type="button" class="pt-button pt-minimal pt-icon-add {{.modifier}}" {{:modifier}}>Button</button>

  .pt-disabled - Disabled appearance
  .pt-intent-primary - Primary intent
  .pt-intent-success - Success intent
  .pt-intent-warning - Warning intent
  .pt-intent-danger - Danger intent

  Styleguide pt-button.pt-minimal
  */

  &.pt-minimal {
    @include pt-button-minimal();
  }

  &.pt-large,
  .pt-large & {
    @include pt-button-large();

    &[class*="pt-icon-"]::before {
      margin-right: $button-icon-spacing-large;
    }

    #{$icon-classes} {
      margin-right: $button-icon-spacing-large;

      &.pt-align-right {
        margin-right: 0;
        margin-left: $button-icon-spacing-large;
      }
    }
  }

  // ensure icon button with no text is a perfect square
  &[class*="pt-icon-"]:empty {
    padding: 0;

    &::before {
      margin-right: 0;
    }
  }
}

a.pt-button {
  text-align: center;
  text-decoration: none;
  transition: none;

  &,
  &:hover,
  &:active {
    // override global 'a' styles
    color: $pt-text-color;
  }

  &.pt-disabled {
    color: $button-color-disabled;
  }
}

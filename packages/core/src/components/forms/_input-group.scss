// Copyright 2016 Palantir Technologies, Inc. All rights reserved.
// Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy
// of the license at https://github.com/palantir/blueprint/blob/master/LICENSE
// and https://github.com/palantir/blueprint/blob/master/PATENTS

@import "../../common/variables";
@import "../button/common";
@import "../spinner/common";

/*
Input groups

Markup:
<div class="pt-input-group {{.modifier}}">
  <span class="pt-icon pt-icon-filter"></span>
  <input type="text" class="pt-input" {{:modifier}} placeholder="Filter histogram..." />
</div>
<div class="pt-input-group {{.modifier}}">
  <input type="password" class="pt-input" {{:modifier}} placeholder="Enter your password..." />
  <button class="pt-button pt-minimal pt-intent-warning pt-icon-lock" {{:modifier}}></button>
</div>
<div class="pt-input-group {{.modifier}}">
  <span class="pt-icon pt-icon-search"></span>
  <input type="text" class="pt-input" {{:modifier}} placeholder="Search" />
  <button class="pt-button pt-minimal pt-intent-primary pt-icon-arrow-right" {{:modifier}}></button>
</div>

:disabled - Disabled input. Must be added separately to the <code>&#60;input&#62;</code> and <code>&#60;button&#62;</code>. Also add <code>.pt-disabled</code> to <code>.pt-input-group</code> for icon coloring (not shown below).
.pt-round - Rounded caps. Button will also be rounded.
.pt-large - Large group. Children will adjust size accordingly.
.pt-intent-primary - Primary intent. (All 4 intents are supported.)

Styleguide pt-input-group
*/

// 3px space between small button and regular input
$input-button-height: $pt-button-height - 6px !default;
// 5px space between regular button and large input
$input-button-height-large: $pt-button-height !default;

.pt-input-group {
  display: block;
  position: relative;

  .pt-input {
    // explicit position prevents shadow clipping https://github.com/palantir/blueprint/pull/490#issuecomment-273342170
    position: relative;
    width: 100%;

    // add space if there's something before or after the input
    &:not(:first-child) {
      padding-left: $pt-input-height;
    }

    &:not(:last-child) {
      padding-right: $pt-input-height;
    }
  }

  .pt-input-action,
  > .pt-button,
  > .pt-icon {
    position: absolute;
    top: 0;

    // glue it to the end it appears on
    &:first-child {
      left: 0;
    }

    &:last-child {
      right: 0;
    }
  }

  .pt-button {
    @include pt-button-height($input-button-height);
    margin: ($pt-input-height - $input-button-height) / 2;
    padding-top: 0;
    padding-bottom: 0;
  }

  .pt-icon {
    @include pt-icon($pt-icon-size-standard);

    // bump icon up so it sits above input
    z-index: 1;
    margin: 0 ($pt-input-height - $pt-icon-size-standard) / 2;
    line-height: $pt-input-height;
    color: $pt-icon-color;
  }

  .pt-spinner {
    margin: ($pt-input-height - $spinner-width * $spinner-width-factor-small) / 2;
  }

  .pt-tag {
    margin: $pt-grid-size / 2;
  }

  // all buttons go gray in default state and assume their native colors only when hovered
  // or when input is focused. this prevents distracting colors in the UI.
  .pt-input:not(:focus) + .pt-button,
  .pt-input:not(:focus) + .pt-input-action .pt-button {
    &.pt-minimal:not(:hover):not(:focus) {
      color: $pt-text-color-muted;

      // same goes for dark
      // stylelint-disable-next-line selector-max-compound-selectors
      .pt-dark & {
        color: $pt-dark-text-color-muted;
      }

      #{$icon-classes} {
        color: $pt-icon-color;
      }
    }

    &.pt-minimal:disabled {
      // override more specific selector above
      // stylelint-disable declaration-no-important
      color: $pt-icon-color-disabled !important;

      #{$icon-classes} {
        color: $pt-icon-color-disabled !important;
      }
    }
  }

  // this class echoes `input:disabled` on the child input, but each action must individually be disabled
  &.pt-disabled {
    // note that enabled buttons inside this input group are still clickable
    cursor: not-allowed;

    .pt-icon {
      color: $pt-icon-color-disabled;
    }
  }

  &.pt-large {
    .pt-button {
      @include pt-button-height($input-button-height-large);
      margin: ($pt-input-height-large - $input-button-height-large) / 2;
      line-height: 0;
    }

    .pt-icon {
      margin: 0 ($pt-input-height-large - $pt-icon-size-standard) / 2;
      line-height: $pt-input-height-large;
    }

    .pt-input {
      @include pt-input-large();

      &:not(:first-child) {
        padding-left: $pt-button-height-large;
      }

      &:not(:last-child) {
        padding-right: $pt-button-height-large;
      }
    }

    .pt-spinner {
      margin: ($pt-input-height-large - $spinner-width * $spinner-width-factor-small) / 2;
    }
  }

  &.pt-round {
    .pt-button,
    .pt-input,
    .pt-tag {
      border-radius: $pt-input-height;
    }
  }

  .pt-dark & {
    .pt-icon {
      color: $pt-dark-icon-color;
    }

    &.pt-disabled .pt-icon {
      color: $pt-dark-icon-color-disabled;
    }
  }

  @each $intent, $color in $pt-intent-colors {
    &.pt-intent-#{$intent} {
      .pt-input {
        @include pt-input-intent($color);
      }

      .pt-icon {
        color: map-get($pt-intent-text-colors, $intent);

        .pt-dark & {
          color: map-get($pt-dark-intent-text-colors, $intent);
        }
      }
    }
  }
}

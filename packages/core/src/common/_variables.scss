// Copyright 2015 Palantir Technologies, Inc. All rights reserved.
// Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy
// of the license at https://github.com/palantir/blueprint/blob/master/LICENSE
// and https://github.com/palantir/blueprint/blob/master/PATENTS

@import "colors";
@import "mixins";

// easily the most important variable, so it comes first
// (so other variables can use it to define themselves)
$pt-grid-size: 10px;

/*
Variables

Available for use with Sass and Less.

```scss
@import "path/to/blueprint/variables";
```

The Sass `$` convention is used in this documentation for consistency with the original source code.
Every variable mentioned below is also available in `variables.less` with an `@` prefix instead of `$`.

Weight: 4

Styleguide variables
*/

/*
Font variables

Typically, correct typography styles should be achieved by using the proper HTML tag (`<p>` for
text, `<h*>` for headings, `<code>` for code, etc.). The following variables are provided for the
rare cases where custom styling is necessary and should be used sparingly:

- `$pt-font-family`
- `$pt-font-family-monospace`
- `$pt-font-size`
- `$pt-font-size-small`
- `$pt-font-size-large`
- `$pt-line-height`

See the [Fonts section](#typography.fonts) for more information and usage guidelines.

Styleguide variables.fonts
*/

// see https://bitsofco.de/the-new-system-font-stack/
$pt-font-family: -apple-system,
                 "BlinkMacSystemFont",
                 "Segoe UI",
                 "Roboto",
                 "Oxygen",
                 "Ubuntu",
                 "Cantarell",
                 "Open Sans",
                 "Helvetica Neue",
                 sans-serif,
                 "Icons16"; // support inline Palantir icons

$pt-font-family-monospace: monospace;

$pt-font-size: $pt-grid-size * 1.4;
$pt-font-size-large: $pt-grid-size * 1.6;
$pt-font-size-small: $pt-grid-size * 1.2;

// a little bit extra to ensure the height comes out to just over 18px (and browser rounds to 18px)
$pt-line-height: ($pt-grid-size * 1.8) / $pt-font-size + 0.0001;

/*
Icon variables

Most icons should be displayed using the `span.pt-icon-*` classes or via modifier classes on
components like `.pt-button`. In rare cases, you may need direct access to the content
string that generates each icon in the icon font. Blueprint provides these variables with
straightforward names (see the [Icons section](#icons) for the full list of identifiers):

- `$pt-icon-style`
- `$pt-icon-align-left`
- `$pt-icon-align-center`
- ...

Variables are also provided for the two icon font families and their pixel sizes:

- `@icons16-family`
- `@icons20-family`
- `$pt-icon-size-standard`
- `$pt-icon-size-large`

Styleguide variables.icons
*/

$icons16-family: "Icons16";
$icons20-family: "Icons20";

$pt-icon-size-standard: 16px;
$pt-icon-size-large: 20px;

/*
Grids & dimensions

Sizes of common components. Most sizing variables are based on `$pt-grid-size`, which has
a value of `10px`. Custom components should adhere to the relevant `height` variable.

- `$pt-grid-size`
- `$pt-border-radius`
- `$pt-button-height`
- `$pt-button-height-large`
- `$pt-input-height`
- `$pt-input-height-large`
- `$pt-navbar-height`

Weight: 1

Styleguide variables.dimensions
*/

$pt-border-radius: floor($pt-grid-size / 3);

// Buttons
$pt-button-height: $pt-grid-size * 3;
$pt-button-height-large: $pt-grid-size * 4;

// Inputs
$pt-input-height: $pt-grid-size * 3;
$pt-input-height-large: $pt-grid-size * 4;

// Others
$pt-navbar-height: $pt-grid-size * 5;

/*
Grid system

Blueprint doesn't provide a grid system. In general, you should try to use the `$pt-grid-size` variable
to generate layout & sizing style rules in your CSS codebase.

In lieu of a full grid system, you should try to use the __CSS3 Flexible Box
layout model__ (a.k.a. "flexbox"). It's quite powerful on its own and allows you to build robust,
responsive layouts without writing much CSS. Here are some resources for learning flexbox:
   - [MDN guide](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes)
   - [CSS Tricks guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)

Styleguide variables.dimensions.grid
*/


/*
Layering

Blueprint provides variables for three z-index layers. This should be enough for most use cases, especially if you
make correct use of [stacking context][MDN]. [Overlay](#components.overlay) components such as dialogs and popovers use these
z-index values to configure their stacking contexts.

- `$pt-z-index-base`
- `$pt-z-index-content`
- `$pt-z-index-overlay`

[MDN]: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context

Weight: 1

Styleguide variables.layering
*/

// Z-Indices
$pt-z-index-base: 0;
$pt-z-index-content: $pt-z-index-base + 10;
$pt-z-index-overlay: $pt-z-index-content + 10;

// Shadow Opacities
$pt-border-shadow-opacity: 0.1;
$pt-drop-shadow-opacity: 0.2;
$pt-dark-border-shadow-opacity: $pt-border-shadow-opacity * 2;
$pt-dark-drop-shadow-opacity: $pt-drop-shadow-opacity * 2;

// Elevations
$pt-elevation-shadow-0: 0 0 0 1px $pt-divider-black;
$pt-elevation-shadow-1: border-shadow($pt-border-shadow-opacity),
                        0 1px 1px rgba($black, $pt-drop-shadow-opacity);
$pt-elevation-shadow-2: border-shadow($pt-border-shadow-opacity),
                        0 1px 1px rgba($black, $pt-drop-shadow-opacity),
                        0 2px 6px rgba($black, $pt-drop-shadow-opacity);
$pt-elevation-shadow-3: border-shadow($pt-border-shadow-opacity),
                        0 2px 4px rgba($black, $pt-drop-shadow-opacity),
                        0 8px 24px rgba($black, $pt-drop-shadow-opacity);
$pt-elevation-shadow-4: border-shadow($pt-border-shadow-opacity),
                        0 4px 8px rgba($black, $pt-drop-shadow-opacity),
                        0 18px 46px 6px rgba($black, $pt-drop-shadow-opacity);

$pt-dark-elevation-shadow-0: 0 0 0 1px $pt-dark-divider-black;
$pt-dark-elevation-shadow-1: border-shadow($pt-dark-border-shadow-opacity),
                             0 1px 1px rgba($black, $pt-dark-drop-shadow-opacity);
$pt-dark-elevation-shadow-2: border-shadow($pt-dark-border-shadow-opacity),
                             0 1px 1px rgba($black, $pt-dark-drop-shadow-opacity),
                             0 2px 6px rgba($black, $pt-dark-drop-shadow-opacity);
$pt-dark-elevation-shadow-3: border-shadow($pt-dark-border-shadow-opacity),
                             0 2px 4px rgba($black, $pt-dark-drop-shadow-opacity),
                             0 8px 24px rgba($black, $pt-dark-drop-shadow-opacity);
$pt-dark-elevation-shadow-4: border-shadow($pt-dark-border-shadow-opacity),
                             0 4px 8px rgba($black, $pt-dark-drop-shadow-opacity),
                             0 18px 46px 6px rgba($black, $pt-dark-drop-shadow-opacity);

// Transitions
$pt-transition-ease: cubic-bezier(0.4, 1, 0.75, 0.9);
$pt-transition-ease-bounce: cubic-bezier(0.54, 1.12, 0.38, 1.11);
$pt-transition-duration: 100ms;

/*
Light theme styles

Use these when you need to build custom UI components that look similar to Blueprint's
light theme components.

- `$pt-dialog-box-shadow`
- `$pt-input-box-shadow`
- `$pt-popover-box-shadow`
- `$pt-tooltip-box-shadow`

Weight: 2

Styleguide variables.light
*/

$pt-input-box-shadow: inset border-shadow(0.15),
                      inset 0 1px 1px rgba($black, $pt-drop-shadow-opacity);

$pt-dialog-box-shadow: $pt-elevation-shadow-4;
$pt-popover-box-shadow: $pt-elevation-shadow-3;
$pt-tooltip-box-shadow: $pt-popover-box-shadow;

/*
Dark theme styles

Use these when you need to build custom UI components that look similar to Blueprint's
dark theme components.

- `$pt-dark-dialog-box-shadow`
- `$pt-dark-input-box-shadow`
- `$pt-dark-popover-box-shadow`
- `$pt-dark-tooltip-box-shadow`

Weight: 3

Styleguide variables.dark
*/

$pt-dark-input-box-shadow: inset border-shadow(0.3),
                           inset 0 1px 1px rgba($black, $pt-dark-drop-shadow-opacity);

$pt-dark-dialog-box-shadow: $pt-dark-elevation-shadow-4;
$pt-dark-popover-box-shadow: $pt-dark-elevation-shadow-3;
$pt-dark-tooltip-box-shadow: $pt-dark-popover-box-shadow;
